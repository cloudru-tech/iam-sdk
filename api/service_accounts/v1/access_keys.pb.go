// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: iam/service_accounts/v1/access_keys.proto

package serviceaccountsv1

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AddAccessKeyRequest - запрос на добавление ключа доступа для сервисного аккаунта
type AddAccessKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ServiceAccountID - идентификатор сервисного аккаунта
	ServiceAccountId string `protobuf:"bytes,1,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	// Description - описание
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Ttl - время жизни ключа. Указывается в формате
	// duration, например:
	//  - 5h - 5 часов
	//  - 1m - 1 минута
	//  - 10s - 10 секунд
	//
	// h - часы
	// m - минуты
	// s - секунды
	Ttl string `protobuf:"bytes,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *AddAccessKeyRequest) Reset() {
	*x = AddAccessKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_service_accounts_v1_access_keys_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAccessKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAccessKeyRequest) ProtoMessage() {}

func (x *AddAccessKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_service_accounts_v1_access_keys_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAccessKeyRequest.ProtoReflect.Descriptor instead.
func (*AddAccessKeyRequest) Descriptor() ([]byte, []int) {
	return file_iam_service_accounts_v1_access_keys_proto_rawDescGZIP(), []int{0}
}

func (x *AddAccessKeyRequest) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *AddAccessKeyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddAccessKeyRequest) GetTtl() string {
	if x != nil {
		return x.Ttl
	}
	return ""
}

// AddAccessKeyResponse ответ на запрос добавления ключа доступа
type AddAccessKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UserID - id ключа
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ServiceAccountID - идентификатор сервисного аккаунта
	ServiceAccountId string `protobuf:"bytes,5,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	// Description - описание
	Description string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	// KeyID - логин для получения токена
	KeyId string `protobuf:"bytes,15,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"` // @gotags: secret:"true"
	// Secret - зашифрованная строка.
	// Пароль для получения токена.
	// Deprecated секрет отображается только при создании ключа
	Secret string `protobuf:"bytes,20,opt,name=secret,proto3" json:"secret,omitempty"` // @gotags: secret:"true"
	// CreatedAt - дата создания записи
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// ExpiredAt - дата истечения действия ключа
	ExpiredAt *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
}

func (x *AddAccessKeyResponse) Reset() {
	*x = AddAccessKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_service_accounts_v1_access_keys_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAccessKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAccessKeyResponse) ProtoMessage() {}

func (x *AddAccessKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_service_accounts_v1_access_keys_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAccessKeyResponse.ProtoReflect.Descriptor instead.
func (*AddAccessKeyResponse) Descriptor() ([]byte, []int) {
	return file_iam_service_accounts_v1_access_keys_proto_rawDescGZIP(), []int{1}
}

func (x *AddAccessKeyResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddAccessKeyResponse) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *AddAccessKeyResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddAccessKeyResponse) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *AddAccessKeyResponse) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *AddAccessKeyResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AddAccessKeyResponse) GetExpiredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredAt
	}
	return nil
}

// GetByIDRequest - запрос ключа доступа по id ключа для сервисного аккаунта
type GetAccessKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UserID - идентификатор ключа
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAccessKeyRequest) Reset() {
	*x = GetAccessKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_service_accounts_v1_access_keys_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccessKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessKeyRequest) ProtoMessage() {}

func (x *GetAccessKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_service_accounts_v1_access_keys_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessKeyRequest.ProtoReflect.Descriptor instead.
func (*GetAccessKeyRequest) Descriptor() ([]byte, []int) {
	return file_iam_service_accounts_v1_access_keys_proto_rawDescGZIP(), []int{2}
}

func (x *GetAccessKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// GetByIDResponse ответ на запрос получения ключа доступа
type GetAccessKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key ключ доступа, не содержит secret
	Key *AccessKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GetAccessKeyResponse) Reset() {
	*x = GetAccessKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_service_accounts_v1_access_keys_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccessKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccessKeyResponse) ProtoMessage() {}

func (x *GetAccessKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_service_accounts_v1_access_keys_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccessKeyResponse.ProtoReflect.Descriptor instead.
func (*GetAccessKeyResponse) Descriptor() ([]byte, []int) {
	return file_iam_service_accounts_v1_access_keys_proto_rawDescGZIP(), []int{3}
}

func (x *GetAccessKeyResponse) GetKey() *AccessKey {
	if x != nil {
		return x.Key
	}
	return nil
}

// ListAccessKeyRequest запрос на получение списка ключей доступа для сервисного аккаунта
type ListAccessKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ServiceAccountID - идентификатор сервисного аккаунта
	ServiceAccountId string `protobuf:"bytes,1,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
}

func (x *ListAccessKeyRequest) Reset() {
	*x = ListAccessKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_service_accounts_v1_access_keys_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccessKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccessKeyRequest) ProtoMessage() {}

func (x *ListAccessKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_service_accounts_v1_access_keys_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccessKeyRequest.ProtoReflect.Descriptor instead.
func (*ListAccessKeyRequest) Descriptor() ([]byte, []int) {
	return file_iam_service_accounts_v1_access_keys_proto_rawDescGZIP(), []int{4}
}

func (x *ListAccessKeyRequest) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

// ListAccessKeyResponse ответ на запрос на получение списка ключей доступа для сервисного аккаунта
type ListAccessKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccessKey - список ключей доступа
	AccessKeys []*AccessKey `protobuf:"bytes,1,rep,name=access_keys,json=accessKeys,proto3" json:"access_keys,omitempty"`
}

func (x *ListAccessKeyResponse) Reset() {
	*x = ListAccessKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_service_accounts_v1_access_keys_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccessKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccessKeyResponse) ProtoMessage() {}

func (x *ListAccessKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_iam_service_accounts_v1_access_keys_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccessKeyResponse.ProtoReflect.Descriptor instead.
func (*ListAccessKeyResponse) Descriptor() ([]byte, []int) {
	return file_iam_service_accounts_v1_access_keys_proto_rawDescGZIP(), []int{5}
}

func (x *ListAccessKeyResponse) GetAccessKeys() []*AccessKey {
	if x != nil {
		return x.AccessKeys
	}
	return nil
}

// DeleteAccessKeyRequest - запрос на удаление ключа доступа по id ключа для сервисного аккаунта
type DeleteAccessKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UserID - идентификатор ключа
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAccessKeyRequest) Reset() {
	*x = DeleteAccessKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_iam_service_accounts_v1_access_keys_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAccessKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccessKeyRequest) ProtoMessage() {}

func (x *DeleteAccessKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_iam_service_accounts_v1_access_keys_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccessKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteAccessKeyRequest) Descriptor() ([]byte, []int) {
	return file_iam_service_accounts_v1_access_keys_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteAccessKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_iam_service_accounts_v1_access_keys_proto protoreflect.FileDescriptor

var file_iam_service_accounts_v1_access_keys_proto_rawDesc = []byte{
	0x0a, 0x29, 0x69, 0x61, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x73, 0x62, 0x65,
	0x72, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x70, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x69, 0x61, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x77, 0x0a,
	0x13, 0x41, 0x64, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x9b, 0x02, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x25, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5d, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x73, 0x62, 0x65, 0x72, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x70, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x44, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x6d, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x73, 0x62, 0x65, 0x72, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x70, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x22,
	0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x32, 0xa1, 0x04, 0x0a, 0x1b, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x03, 0x41, 0x64,
	0x64, 0x12, 0x3d, 0x2e, 0x73, 0x62, 0x65, 0x72, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x70,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x64, 0x64,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3e, 0x2e, 0x73, 0x62, 0x65, 0x72, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x70, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x3d, 0x2e, 0x73, 0x62, 0x65,
	0x72, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x70, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x73, 0x62, 0x65, 0x72,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x70, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x2e, 0x73, 0x62, 0x65, 0x72, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x70, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x73, 0x62, 0x65, 0x72, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x70, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x40, 0x2e, 0x73, 0x62, 0x65, 0x72, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x70,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x6b, 0x5a,
	0x69, 0x67, 0x69, 0x74, 0x2e, 0x73, 0x62, 0x65, 0x72, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x65, 0x63, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x76, 0x70,
	0x2f, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_iam_service_accounts_v1_access_keys_proto_rawDescOnce sync.Once
	file_iam_service_accounts_v1_access_keys_proto_rawDescData = file_iam_service_accounts_v1_access_keys_proto_rawDesc
)

func file_iam_service_accounts_v1_access_keys_proto_rawDescGZIP() []byte {
	file_iam_service_accounts_v1_access_keys_proto_rawDescOnce.Do(func() {
		file_iam_service_accounts_v1_access_keys_proto_rawDescData = protoimpl.X.CompressGZIP(file_iam_service_accounts_v1_access_keys_proto_rawDescData)
	})
	return file_iam_service_accounts_v1_access_keys_proto_rawDescData
}

var file_iam_service_accounts_v1_access_keys_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_iam_service_accounts_v1_access_keys_proto_goTypes = []interface{}{
	(*AddAccessKeyRequest)(nil),    // 0: sbercloud.cp.iam.api.v1.service_accounts.AddAccessKeyRequest
	(*AddAccessKeyResponse)(nil),   // 1: sbercloud.cp.iam.api.v1.service_accounts.AddAccessKeyResponse
	(*GetAccessKeyRequest)(nil),    // 2: sbercloud.cp.iam.api.v1.service_accounts.GetAccessKeyRequest
	(*GetAccessKeyResponse)(nil),   // 3: sbercloud.cp.iam.api.v1.service_accounts.GetAccessKeyResponse
	(*ListAccessKeyRequest)(nil),   // 4: sbercloud.cp.iam.api.v1.service_accounts.ListAccessKeyRequest
	(*ListAccessKeyResponse)(nil),  // 5: sbercloud.cp.iam.api.v1.service_accounts.ListAccessKeyResponse
	(*DeleteAccessKeyRequest)(nil), // 6: sbercloud.cp.iam.api.v1.service_accounts.DeleteAccessKeyRequest
	(*timestamppb.Timestamp)(nil),  // 7: google.protobuf.Timestamp
	(*AccessKey)(nil),              // 8: sbercloud.cp.iam.api.v1.service_accounts.AccessKey
	(*emptypb.Empty)(nil),          // 9: google.protobuf.Empty
}
var file_iam_service_accounts_v1_access_keys_proto_depIdxs = []int32{
	7, // 0: sbercloud.cp.iam.api.v1.service_accounts.AddAccessKeyResponse.created_at:type_name -> google.protobuf.Timestamp
	7, // 1: sbercloud.cp.iam.api.v1.service_accounts.AddAccessKeyResponse.expired_at:type_name -> google.protobuf.Timestamp
	8, // 2: sbercloud.cp.iam.api.v1.service_accounts.GetAccessKeyResponse.key:type_name -> sbercloud.cp.iam.api.v1.service_accounts.AccessKey
	8, // 3: sbercloud.cp.iam.api.v1.service_accounts.ListAccessKeyResponse.access_keys:type_name -> sbercloud.cp.iam.api.v1.service_accounts.AccessKey
	0, // 4: sbercloud.cp.iam.api.v1.service_accounts.AccessKeyCredentialsService.Add:input_type -> sbercloud.cp.iam.api.v1.service_accounts.AddAccessKeyRequest
	2, // 5: sbercloud.cp.iam.api.v1.service_accounts.AccessKeyCredentialsService.Get:input_type -> sbercloud.cp.iam.api.v1.service_accounts.GetAccessKeyRequest
	4, // 6: sbercloud.cp.iam.api.v1.service_accounts.AccessKeyCredentialsService.List:input_type -> sbercloud.cp.iam.api.v1.service_accounts.ListAccessKeyRequest
	6, // 7: sbercloud.cp.iam.api.v1.service_accounts.AccessKeyCredentialsService.Delete:input_type -> sbercloud.cp.iam.api.v1.service_accounts.DeleteAccessKeyRequest
	1, // 8: sbercloud.cp.iam.api.v1.service_accounts.AccessKeyCredentialsService.Add:output_type -> sbercloud.cp.iam.api.v1.service_accounts.AddAccessKeyResponse
	3, // 9: sbercloud.cp.iam.api.v1.service_accounts.AccessKeyCredentialsService.Get:output_type -> sbercloud.cp.iam.api.v1.service_accounts.GetAccessKeyResponse
	5, // 10: sbercloud.cp.iam.api.v1.service_accounts.AccessKeyCredentialsService.List:output_type -> sbercloud.cp.iam.api.v1.service_accounts.ListAccessKeyResponse
	9, // 11: sbercloud.cp.iam.api.v1.service_accounts.AccessKeyCredentialsService.Delete:output_type -> google.protobuf.Empty
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_iam_service_accounts_v1_access_keys_proto_init() }
func file_iam_service_accounts_v1_access_keys_proto_init() {
	if File_iam_service_accounts_v1_access_keys_proto != nil {
		return
	}
	file_iam_service_accounts_v1_access_key_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_iam_service_accounts_v1_access_keys_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAccessKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_service_accounts_v1_access_keys_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAccessKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_service_accounts_v1_access_keys_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccessKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_service_accounts_v1_access_keys_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccessKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_service_accounts_v1_access_keys_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccessKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_service_accounts_v1_access_keys_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccessKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_iam_service_accounts_v1_access_keys_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAccessKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_iam_service_accounts_v1_access_keys_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_iam_service_accounts_v1_access_keys_proto_goTypes,
		DependencyIndexes: file_iam_service_accounts_v1_access_keys_proto_depIdxs,
		MessageInfos:      file_iam_service_accounts_v1_access_keys_proto_msgTypes,
	}.Build()
	File_iam_service_accounts_v1_access_keys_proto = out.File
	file_iam_service_accounts_v1_access_keys_proto_rawDesc = nil
	file_iam_service_accounts_v1_access_keys_proto_goTypes = nil
	file_iam_service_accounts_v1_access_keys_proto_depIdxs = nil
}
