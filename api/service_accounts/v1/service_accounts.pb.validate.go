// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: iam/service_accounts/v1/service_accounts.proto

package serviceaccountsv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddServiceAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddServiceAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServiceAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServiceAccountRequestMultiError, or nil if none found.
func (m *AddServiceAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServiceAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return AddServiceAccountRequestMultiError(errors)
	}

	return nil
}

// AddServiceAccountRequestMultiError is an error wrapping multiple validation
// errors returned by AddServiceAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type AddServiceAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServiceAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServiceAccountRequestMultiError) AllErrors() []error { return m }

// AddServiceAccountRequestValidationError is the validation error returned by
// AddServiceAccountRequest.Validate if the designated constraints aren't met.
type AddServiceAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServiceAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServiceAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServiceAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServiceAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServiceAccountRequestValidationError) ErrorName() string {
	return "AddServiceAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddServiceAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServiceAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServiceAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServiceAccountRequestValidationError{}

// Validate checks the field values on AddServiceAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddServiceAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServiceAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServiceAccountResponseMultiError, or nil if none found.
func (m *AddServiceAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServiceAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetServiceAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddServiceAccountResponseValidationError{
					field:  "ServiceAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddServiceAccountResponseValidationError{
					field:  "ServiceAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddServiceAccountResponseValidationError{
				field:  "ServiceAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddServiceAccountResponseMultiError(errors)
	}

	return nil
}

// AddServiceAccountResponseMultiError is an error wrapping multiple validation
// errors returned by AddServiceAccountResponse.ValidateAll() if the
// designated constraints aren't met.
type AddServiceAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServiceAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServiceAccountResponseMultiError) AllErrors() []error { return m }

// AddServiceAccountResponseValidationError is the validation error returned by
// AddServiceAccountResponse.Validate if the designated constraints aren't met.
type AddServiceAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServiceAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServiceAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServiceAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServiceAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServiceAccountResponseValidationError) ErrorName() string {
	return "AddServiceAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddServiceAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServiceAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServiceAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServiceAccountResponseValidationError{}

// Validate checks the field values on GetServiceAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceAccountRequestMultiError, or nil if none found.
func (m *GetServiceAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceAccountId

	if len(errors) > 0 {
		return GetServiceAccountRequestMultiError(errors)
	}

	return nil
}

// GetServiceAccountRequestMultiError is an error wrapping multiple validation
// errors returned by GetServiceAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type GetServiceAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceAccountRequestMultiError) AllErrors() []error { return m }

// GetServiceAccountRequestValidationError is the validation error returned by
// GetServiceAccountRequest.Validate if the designated constraints aren't met.
type GetServiceAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceAccountRequestValidationError) ErrorName() string {
	return "GetServiceAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceAccountRequestValidationError{}

// Validate checks the field values on GetServiceAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceAccountResponseMultiError, or nil if none found.
func (m *GetServiceAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetServiceAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetServiceAccountResponseValidationError{
					field:  "ServiceAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetServiceAccountResponseValidationError{
					field:  "ServiceAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetServiceAccountResponseValidationError{
				field:  "ServiceAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetServiceAccountResponseMultiError(errors)
	}

	return nil
}

// GetServiceAccountResponseMultiError is an error wrapping multiple validation
// errors returned by GetServiceAccountResponse.ValidateAll() if the
// designated constraints aren't met.
type GetServiceAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceAccountResponseMultiError) AllErrors() []error { return m }

// GetServiceAccountResponseValidationError is the validation error returned by
// GetServiceAccountResponse.Validate if the designated constraints aren't met.
type GetServiceAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceAccountResponseValidationError) ErrorName() string {
	return "GetServiceAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceAccountResponseValidationError{}

// Validate checks the field values on DeleteServiceAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServiceAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServiceAccountRequestMultiError, or nil if none found.
func (m *DeleteServiceAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceAccountId

	if len(errors) > 0 {
		return DeleteServiceAccountRequestMultiError(errors)
	}

	return nil
}

// DeleteServiceAccountRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteServiceAccountRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteServiceAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceAccountRequestMultiError) AllErrors() []error { return m }

// DeleteServiceAccountRequestValidationError is the validation error returned
// by DeleteServiceAccountRequest.Validate if the designated constraints
// aren't met.
type DeleteServiceAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceAccountRequestValidationError) ErrorName() string {
	return "DeleteServiceAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceAccountRequestValidationError{}
