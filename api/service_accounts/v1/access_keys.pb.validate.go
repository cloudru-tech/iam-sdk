// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: iam/service_accounts/v1/access_keys.proto

package serviceaccountsv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddAccessKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAccessKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAccessKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAccessKeyRequestMultiError, or nil if none found.
func (m *AddAccessKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAccessKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceAccountId

	// no validation rules for Description

	// no validation rules for Ttl

	if len(errors) > 0 {
		return AddAccessKeyRequestMultiError(errors)
	}

	return nil
}

// AddAccessKeyRequestMultiError is an error wrapping multiple validation
// errors returned by AddAccessKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type AddAccessKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAccessKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAccessKeyRequestMultiError) AllErrors() []error { return m }

// AddAccessKeyRequestValidationError is the validation error returned by
// AddAccessKeyRequest.Validate if the designated constraints aren't met.
type AddAccessKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAccessKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAccessKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAccessKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAccessKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAccessKeyRequestValidationError) ErrorName() string {
	return "AddAccessKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddAccessKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAccessKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAccessKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAccessKeyRequestValidationError{}

// Validate checks the field values on AddAccessKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddAccessKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAccessKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAccessKeyResponseMultiError, or nil if none found.
func (m *AddAccessKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAccessKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ServiceAccountId

	// no validation rules for Description

	// no validation rules for KeyId

	// no validation rules for Secret

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddAccessKeyResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddAccessKeyResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddAccessKeyResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddAccessKeyResponseValidationError{
					field:  "ExpiredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddAccessKeyResponseValidationError{
					field:  "ExpiredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddAccessKeyResponseValidationError{
				field:  "ExpiredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddAccessKeyResponseMultiError(errors)
	}

	return nil
}

// AddAccessKeyResponseMultiError is an error wrapping multiple validation
// errors returned by AddAccessKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type AddAccessKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAccessKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAccessKeyResponseMultiError) AllErrors() []error { return m }

// AddAccessKeyResponseValidationError is the validation error returned by
// AddAccessKeyResponse.Validate if the designated constraints aren't met.
type AddAccessKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAccessKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAccessKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAccessKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAccessKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAccessKeyResponseValidationError) ErrorName() string {
	return "AddAccessKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddAccessKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAccessKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAccessKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAccessKeyResponseValidationError{}

// Validate checks the field values on GetAccessKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccessKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccessKeyRequestMultiError, or nil if none found.
func (m *GetAccessKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAccessKeyRequestMultiError(errors)
	}

	return nil
}

// GetAccessKeyRequestMultiError is an error wrapping multiple validation
// errors returned by GetAccessKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAccessKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessKeyRequestMultiError) AllErrors() []error { return m }

// GetAccessKeyRequestValidationError is the validation error returned by
// GetAccessKeyRequest.Validate if the designated constraints aren't met.
type GetAccessKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessKeyRequestValidationError) ErrorName() string {
	return "GetAccessKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessKeyRequestValidationError{}

// Validate checks the field values on GetAccessKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccessKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccessKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccessKeyResponseMultiError, or nil if none found.
func (m *GetAccessKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccessKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccessKeyResponseValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccessKeyResponseValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccessKeyResponseValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAccessKeyResponseMultiError(errors)
	}

	return nil
}

// GetAccessKeyResponseMultiError is an error wrapping multiple validation
// errors returned by GetAccessKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAccessKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccessKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccessKeyResponseMultiError) AllErrors() []error { return m }

// GetAccessKeyResponseValidationError is the validation error returned by
// GetAccessKeyResponse.Validate if the designated constraints aren't met.
type GetAccessKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccessKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccessKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccessKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccessKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccessKeyResponseValidationError) ErrorName() string {
	return "GetAccessKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccessKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccessKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccessKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccessKeyResponseValidationError{}

// Validate checks the field values on ListAccessKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccessKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccessKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccessKeyRequestMultiError, or nil if none found.
func (m *ListAccessKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccessKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceAccountId

	if len(errors) > 0 {
		return ListAccessKeyRequestMultiError(errors)
	}

	return nil
}

// ListAccessKeyRequestMultiError is an error wrapping multiple validation
// errors returned by ListAccessKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAccessKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccessKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccessKeyRequestMultiError) AllErrors() []error { return m }

// ListAccessKeyRequestValidationError is the validation error returned by
// ListAccessKeyRequest.Validate if the designated constraints aren't met.
type ListAccessKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccessKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccessKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccessKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccessKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccessKeyRequestValidationError) ErrorName() string {
	return "ListAccessKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccessKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccessKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccessKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccessKeyRequestValidationError{}

// Validate checks the field values on ListAccessKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccessKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccessKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccessKeyResponseMultiError, or nil if none found.
func (m *ListAccessKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccessKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAccessKeys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAccessKeyResponseValidationError{
						field:  fmt.Sprintf("AccessKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAccessKeyResponseValidationError{
						field:  fmt.Sprintf("AccessKeys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAccessKeyResponseValidationError{
					field:  fmt.Sprintf("AccessKeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAccessKeyResponseMultiError(errors)
	}

	return nil
}

// ListAccessKeyResponseMultiError is an error wrapping multiple validation
// errors returned by ListAccessKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAccessKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccessKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccessKeyResponseMultiError) AllErrors() []error { return m }

// ListAccessKeyResponseValidationError is the validation error returned by
// ListAccessKeyResponse.Validate if the designated constraints aren't met.
type ListAccessKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccessKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccessKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccessKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccessKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccessKeyResponseValidationError) ErrorName() string {
	return "ListAccessKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccessKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccessKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccessKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccessKeyResponseValidationError{}

// Validate checks the field values on DeleteAccessKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccessKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccessKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccessKeyRequestMultiError, or nil if none found.
func (m *DeleteAccessKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccessKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAccessKeyRequestMultiError(errors)
	}

	return nil
}

// DeleteAccessKeyRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAccessKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteAccessKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccessKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccessKeyRequestMultiError) AllErrors() []error { return m }

// DeleteAccessKeyRequestValidationError is the validation error returned by
// DeleteAccessKeyRequest.Validate if the designated constraints aren't met.
type DeleteAccessKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccessKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccessKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccessKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccessKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccessKeyRequestValidationError) ErrorName() string {
	return "DeleteAccessKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccessKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccessKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccessKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccessKeyRequestValidationError{}
